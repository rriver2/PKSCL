[{"/Users/river2/Desktop/PKSCL/frontend/src/index.js":"1","/Users/river2/Desktop/PKSCL/frontend/src/reportWebVitals.js":"2","/Users/river2/Desktop/PKSCL/frontend/src/App.js":"3","/Users/river2/Desktop/PKSCL/frontend/src/AccessPage.js":"4","/Users/river2/Desktop/PKSCL/frontend/src/AlertBox.js":"5","/Users/river2/Desktop/PKSCL/frontend/src/ManagementPage.js":"6","/Users/river2/Desktop/PKSCL/frontend/src/MainPage.js":"7"},{"size":641,"mtime":1642833007873,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1642060834506,"results":"10","hashOfConfig":"9"},{"size":2732,"mtime":1643010212504,"results":"11","hashOfConfig":"9"},{"size":37742,"mtime":1643011161445,"results":"12","hashOfConfig":"9"},{"size":550,"mtime":1642832998582,"results":"13","hashOfConfig":"9"},{"size":13903,"mtime":1643005942031,"results":"14","hashOfConfig":"9"},{"size":29913,"mtime":1643007953374,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"47akap",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/river2/Desktop/PKSCL/frontend/src/index.js",[],["34","35"],"/Users/river2/Desktop/PKSCL/frontend/src/reportWebVitals.js",[],"/Users/river2/Desktop/PKSCL/frontend/src/App.js",["36","37","38"],"import './css/App.css';\nimport { useEffect, useState } from 'react';\nimport AccessPage from './AccessPage';\nimport MainPage from './MainPage';\nimport ManagementPage from './ManagementPage';\nimport { Link, Route, Switch, useHistory } from 'react-router-dom';\n\nfunction loadmonth() {\n        let now = new Date();\n        let month = now.getMonth();\n            return month;\n    }\n    function selectseason() {\n        switch (loadmonth()) {\n            case 0:case 1:case 2:\n            return \"quarter1\"\n            case 3:case 4:case 5:\n            return \"quarter2\"\n            case 6:case 7:case 8:\n            return \"quarter3\"\n            case 9:case 10:case 11:\n            return \"quarter4\"\n            default:\n            return \"\";\n        }\n    }\n    function setColorProperty(colorQuarter, colorQuarterCircle,colorLeftPanel,colorCard){\n            document.documentElement.style.setProperty(\"--color-quarter\", colorQuarter);\n            document.documentElement.style.setProperty(\"--color-quarterCircle\", colorQuarterCircle);\n            document.documentElement.style.setProperty(\"--color-leftPanel\", colorLeftPanel);\n            document.documentElement.style.setProperty(\"--color-card\", colorCard);\n    }\n\n    function defineColor(quarter){\n        if(quarter === \"quarter1\"){\n            setColorProperty(\"#c89034\", \"linear-gradient(0deg, rgba(200, 144, 52, 1) 0%, rgba(213, 178, 121, 1) 67%\", \"#f2e3d7\", \"#fff5ed\");\n        }else if(quarter === \"quarter2\"){\n            setColorProperty(\"#578e5a\",\"linear-gradient(0deg, rgba(87,142,90,1) 0%, rgba(126,199,130,1) 67%)\", \"#cedbcf\", \"#dee7df\");\n        }else if(quarter === \"quarter3\"){\n            setColorProperty( \"#9b4346\",\"linear-gradient(0deg, rgba(155,67,70,1) 0%, rgba(231,140,145,1) 67%)\",\"#e6bdbd\", \"#f3dddd\");\n        }else if(quarter === \"quarter4\"){\n            setColorProperty(\"#597082\",\"linear-gradient(0deg, rgba(89,112,130,1) 0%, rgba(145,186,217,1) 67%)\", \"#d0dbe5\", \"#e6f1fb\");\n        }\n    }\n\n\nfunction App() {\n\n    const [loginPosition, setLoginPosition] = useState(\"student\");\n    const [todayQuarter, setTodatQuarter] = useState(selectseason);\n\n    useEffect(()=>{\n        let quarter = selectseason();\n        defineColor(quarter);\n    },[])\n\n  return (\n    <div>\n      <Switch>\n        <Route path='/manage'>\n          <ManagementPage loginPosition={loginPosition}></ManagementPage>\n        </Route>\n\n        <Route path='/main'>\n          <MainPage loginPosition={loginPosition} todayQuarter={todayQuarter}></MainPage>\n        </Route>\n\n        <Route path='/' >\n          <AccessPage setLoginPosition = {setLoginPosition} todayQuarter={todayQuarter}> </AccessPage>\n        </Route>\n      </Switch>\n\n\n    </div>\n  );\n}\n\nexport default App;",["39","40"],"/Users/river2/Desktop/PKSCL/frontend/src/AccessPage.js",["41","42","43"],"/Users/river2/Desktop/PKSCL/frontend/src/AlertBox.js",[],"/Users/river2/Desktop/PKSCL/frontend/src/ManagementPage.js",["44","45","46","47","48"],"import { useEffect, useState } from 'react';\nimport { Navbar, Container} from 'react-bootstrap';\nimport './css/ManagementPage.css';\nimport axios from 'axios';\nimport { Link, Route, Switch, useHistory } from 'react-router-dom';\n\nfunction ManagementPage(props){\n    const history = useHistory();\n    const [waiting,setWaiting] = useState([\n        {  \n            \"stdID\" : \"a111111111\",\n            \"name\" : \"이름1\"\n        } ,\n        { \n            \"stdID\" : \"a22222222\",\n            \"name\" : \"이름2\"\n        },\n        {\n            \"stdID\" : \"a33333333\",\n            \"name\" : \"이름3\"\n        },\n        {  \n            \"stdID\" : \"a111111111\",\n            \"name\" : \"이름1\"\n        } ,\n        { \n            \"stdID\" : \"a22222222\",\n            \"name\" : \"이름2\"\n        },\n        {\n            \"stdID\" : \"a33333333\",\n            \"name\" : \"이름3\"\n        },\n        {  \n            \"stdID\" : \"a111111111\",\n            \"name\" : \"이름1\"\n        } ,\n        { \n            \"stdID\" : \"a22222222\",\n            \"name\" : \"이름2\"\n        },\n        {\n            \"stdID\" : \"a33333333\",\n            \"name\" : \"이름3\"\n        },\n        {  \n            \"stdID\" : \"a111111111\",\n            \"name\" : \"이름1\"\n        } ,\n        { \n            \"stdID\" : \"a22222222\",\n            \"name\" : \"이름2\"\n        },\n        {\n            \"stdID\" : \"a33333333\",\n            \"name\" : \"이름3\"\n        }\n    ]);\n\n    const [refusal,setRefusal] = useState([]);\n    const [approval,setApproval] = useState([{  \n        \"stdID\" : \"b11111111\",\n         \"name\" : \"1이름\"\n      } ,\n      { \n         \"stdID\" : \"b22222222\",\n         \"name\" : \"2이름\"\n      },\n      {\n         \"stdID\" : \"b33333333\",\n         \"name\" : \"3이름\"\n      },\n      {\n        \"stdID\" : \"b44444444\",\n        \"name\" : \"4이름\"\n     },\n     {\n        \"stdID\" : \"b5555555\",\n        \"name\" : \"5이름\"\n     },\n    {  \n        \"stdID\" : \"b11111111\",\n         \"name\" : \"1이름\"\n      } ,\n      { \n         \"stdID\" : \"b22222222\",\n         \"name\" : \"2이름\"\n      },\n      {\n         \"stdID\" : \"b33333333\",\n         \"name\" : \"3이름\"\n      },\n      {\n        \"stdID\" : \"b44444444\",\n        \"name\" : \"4이름\"\n     },\n     {\n        \"stdID\" : \"b5555555\",\n        \"name\" : \"5이름\"\n     },\n    {  \n        \"stdID\" : \"b11111111\",\n         \"name\" : \"1이름\"\n      } ,\n      { \n         \"stdID\" : \"b22222222\",\n         \"name\" : \"2이름\"\n      },\n      {\n         \"stdID\" : \"b33333333\",\n         \"name\" : \"3이름\"\n      },\n      {\n        \"stdID\" : \"b44444444\",\n        \"name\" : \"4이름\"\n     },\n     {\n        \"stdID\" : \"b5555555\",\n        \"name\" : \"5이름\"\n     }]);\n     const [leftTable, setLeftTable] = useState([...waiting]);\n     const [rightTable, setRightTable] = useState([...approval]);\n\n     const [leftCheckedList, setLeftCheckedList] = useState([]);\n     const [rightCheckedList, setRightCheckedList] = useState([]);\n\n     const changeHandler = (checked, studentInfo, setCheckedList, checkedList) => {\n       if (checked) {\n        setCheckedList([...checkedList, studentInfo]);\n       } else {\n        setCheckedList(checkedList.filter((e) => e !== studentInfo));\n       }\n       console.log(checked)\n     };\n\n    const [searchStudent, setSearchStudent] = useState(\"\");\n    const [searchButton, setSearchButton] = useState(\"search\");\n\n\n    function patchStudent(studentStatus){\n        let payload;\n        if(studentStatus === \"approval\" || studentStatus === \"refusal\" ){\n            payload = leftCheckedList;\n        }else if(studentStatus === \"delegating\" || studentStatus === \"waiting\" ){\n            payload = rightCheckedList;\n        }else{\n            alert(\"error!\");\n        }\n        if(props.loginPosition === \"president\"){\n            axios.patch('/student-list/', payload)\n            .then((payload) => {\n                setWaiting([...payload.data.studentPresidentList.waiting]);\n                setRefusal([...payload.data.studentPresidentList.refusal]);\n                setApproval([...payload.data.studentPresidentList.approval]);\n            })\n            .catch((error) => {\n            alert(\"학생 전송에 실패했습니다 :)\")\n            });\n        }else if(props.loginPosition === \"admin\"){\n            axios.patch('/student-president-list/', payload)\n            .then((payload) => {\n                setWaiting([...payload.data.studentPresidentList.waiting]);\n                setRefusal([...payload.data.studentPresidentList.refusal]);\n                setApproval([...payload.data.studentPresidentList.approval]);\n            })\n            .catch((error) => {\n            alert(\"학생 전송에 실패했습니다 :)\")\n            });\n        }\n    }\n\n    useEffect(() => {\n    axios.get('/manage')\n      .then((payload) => {\n        setWaiting([...payload.data.studentPresidentList.waiting]);\n        setRefusal([...payload.data.studentPresidentList.refusal]);\n        setApproval([...payload.data.studentPresidentList.approval]);\n      })\n      .catch((error) => {\n        alert(\"학과리스트를 불러올 수 없습니다.\");\n      })\n    }, []);\n  \n\n    return(\n        <div className=\"ManagementPageContainer\">\n            <Navbar expand=\"lg\" style={{padding: \"30px 0\"}}>\n                <Container fluid style={{justifyContent: \"center\", backgroundColor: \"none\"}}>\n                    <h2 style={{margin : \"0\"}}>학생승인 현황</h2>\n                    <div className=\"searchBar\" >\n                        <input onChange={(e) => { \n                            setSearchStudent(e.target.value); \n                            setSearchButton(\"search\");\n                            if(e.target.value === \"\"){\n                                setSearchButton(\"search\");\n                                setLeftTable([...waiting]);\n                                setRightTable([...approval]);\n                            }\n                        }} \n                            name=\"q\" value={searchStudent} type=\"search\" placeholder=\"Search\" ></input>\n                            \n                        <button onClick={(e) => {\n                            if( searchButton === \"x\"){\n                                setSearchStudent(\"\");\n                                setSearchButton(\"search\");\n                                setLeftTable([...waiting]);\n                                setRightTable([...approval]);\n                            }else{\n                                if(searchStudent=== \"\"){\n                                    alert(\"검색명을 입력해주세요 :)\");\n                                }else{\n                                    setSearchButton(\"x\");\n                            \n                                    let left = waiting.filter((item) => (item.name.includes(searchStudent)||item.stdID.includes(searchStudent)));\n                                    let right = approval.filter((item) => (item.name.includes(searchStudent)||item.stdID.includes(searchStudent)));\n\n                                    setLeftTable(left);\n                                    setRightTable(right);\n                                }\n                                \n                            }\n                        }}\n                        \n                            className='searchButton' type='button'>\n                                {\n                                searchButton === \"search\"\n                                ?<i className=\"fas fa-search\"></i>\n                                :<i className=\"fas fa-times\"></i>\n                                }\n                                </button>\n                    </div>\n                </Container>\n            </Navbar>\n            <div className='tables'>\n                <div className='tableSet'>\n                    <div className= \"buttons\">\n                        <button className='submitButton' onClick={()=>{\n                                if(leftCheckedList.length === 0){\n                                    alert(\"승인할 학생을 1명 이상 선택하세요 :)\")\n                                }else{\n                                    patchStudent(\"approval\");\n                                }\n                                setLeftCheckedList([]);\n                            }}>승인</button> \n                        <button className='submitButton' onClick={()=>{\n                                console.log(\"거절\")\n                                setLeftCheckedList([]);\n                                if(leftCheckedList.length > 0){\n                                    patchStudent(\"refusal\");\n                                }else{\n                                    alert(\"거절할 학생을 1명 이상 선택하세요 :)\")\n                                }\n                            }}>거절</button>\n                    </div>\n                    <table >\n                        <thead>\n                            <tr >\n                                <th colSpan={\"3\"} style={{borderTopRightRadius:\"20px\", borderTopLeftRadius:\"20px\"}}>승인대기</th>\n                            </tr>\n                        </thead>\n                        <div className=\"tableRadius\" style={{borderBottomRightRadius:\"20px\", borderBottomLeftRadius:\"20px\"}}>\n                        <tbody className = \"tableList\" style={{borderBottomRightRadius:\"20px\", borderBottomLeftRadius:\"20px\"}}>\n                            {\n                                leftTable.length === 0\n                                ?   <tr>\n                                        <td colSpan={\"3\"}>승인대기 학생이 없습니다.</td>\n                                    </tr>\n                                :leftTable.map((student,i)=>{\n                                    return(\n                                            <tr key={i}>\n                                            <td >{student.stdID}</td>\n                                            <td>{student.name}</td>\n                                            <td ><input \n                                                    id= {student}\n                                                    type=\"checkbox\" \n                                                    onChange={(e)=>{\n                                                    changeHandler(e.target.checked, student ,setLeftCheckedList,leftCheckedList)\n                                                    }}\n                                                    checked={leftCheckedList.includes(student) ? true : false}\n                                            /></td>\n                                        </tr>\n                                    )\n                                })\n                            }\n                        </tbody>\n                            </div>\n                    </table>\n                </div>\n\n                <div className='tableSet'>\n                    <div className= \"buttons\">\n                        <button className='submitButton' style={{width : \"110px\"}} onClick={()=>{\n                                if(rightCheckedList.length === 1){\n                                    setRightCheckedList([]);\n                                    patchStudent(\"delegating\");\n                                }else{\n                                    alert(\"학생회장 위임은 한명만 가능합니다.\");\n                                }\n                            }}>회장권한위임</button> \n                        <button className='submitButton' onClick={()=>{\n                                setRightCheckedList([]);\n                                if(rightCheckedList.length > 0){\n                                    patchStudent(\"waiting\");\n                                }\n                            }}\n                        >대기</button>\n                    </div>\n                     <table>\n                        <thead>\n                            <tr>\n                                <th colSpan={\"3\"} style={{borderTopRightRadius:\"20px\", borderTopLeftRadius:\"20px\"}}>승인완료</th>\n                            </tr>\n                        </thead>\n                        <div className=\"tableRadius\" style={{borderBottomRightRadius:\"20px\", borderBottomLeftRadius:\"20px\"}}>\n                        <tbody className = \"tableList\" style={{borderBottomRightRadius:\"20px\", borderBottomLeftRadius:\"20px\"}}>\n                        {\n                            rightTable.length === 0\n                                ?   <tr>\n                                        <td colSpan={\"3\"}>승인완료 학생이 없습니다.</td>\n                                    </tr>\n                                :rightTable.map((student,i)=>{\n                                    return(\n                                            <tr key={i}>\n                                            <td>{student.stdID}</td>\n                                            <td>{student.name}</td>\n                                            <td><input \n                                                    id= {student}\n                                                    type=\"checkbox\" \n                                                    onChange={(e)=>{\n                                                    changeHandler(e.currentTarget.checked, student ,setRightCheckedList,rightCheckedList)\n                                                    }}\n                                                    checked={rightCheckedList.includes(student) ? true : false}\n                                            /></td>\n                                        </tr>\n                                        \n                                    )\n                                })\n                            }\n                        </tbody>\n                        </div>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ManagementPage;","/Users/river2/Desktop/PKSCL/frontend/src/MainPage.js",["49","50","51","52"],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":6,"column":10,"nodeType":"59","messageId":"60","endLine":6,"endColumn":14},{"ruleId":"57","severity":1,"message":"61","line":6,"column":31,"nodeType":"59","messageId":"60","endLine":6,"endColumn":41},{"ruleId":"57","severity":1,"message":"62","line":50,"column":26,"nodeType":"59","messageId":"60","endLine":50,"endColumn":41},{"ruleId":"53","replacedBy":"63"},{"ruleId":"55","replacedBy":"64"},{"ruleId":"57","severity":1,"message":"58","line":4,"column":10,"nodeType":"59","messageId":"60","endLine":4,"endColumn":14},{"ruleId":"65","severity":1,"message":"66","line":84,"column":6,"nodeType":"67","endLine":84,"endColumn":17,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":140,"column":13,"nodeType":"71","messageId":"72","endLine":140,"endColumn":58},{"ruleId":"57","severity":1,"message":"58","line":5,"column":10,"nodeType":"59","messageId":"60","endLine":5,"endColumn":14},{"ruleId":"57","severity":1,"message":"73","line":5,"column":16,"nodeType":"59","messageId":"60","endLine":5,"endColumn":21},{"ruleId":"57","severity":1,"message":"74","line":5,"column":23,"nodeType":"59","messageId":"60","endLine":5,"endColumn":29},{"ruleId":"57","severity":1,"message":"75","line":8,"column":11,"nodeType":"59","messageId":"60","endLine":8,"endColumn":18},{"ruleId":"57","severity":1,"message":"76","line":60,"column":12,"nodeType":"59","messageId":"60","endLine":60,"endColumn":19},{"ruleId":"77","severity":1,"message":"78","line":390,"column":10,"nodeType":"79","messageId":"80","endLine":390,"endColumn":26},{"ruleId":"77","severity":1,"message":"78","line":408,"column":10,"nodeType":"79","messageId":"80","endLine":408,"endColumn":26},{"ruleId":"65","severity":1,"message":"81","line":543,"column":8,"nodeType":"67","endLine":543,"endColumn":10,"suggestions":"82"},{"ruleId":"65","severity":1,"message":"81","line":547,"column":8,"nodeType":"67","endLine":547,"endColumn":24,"suggestions":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'setTodatQuarter' is assigned a value but never used.",["84"],["85"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'position'. Either include it or remove the dependency array.","ArrayExpression",["86"],"no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'Route' is defined but never used.","'Switch' is defined but never used.","'history' is assigned a value but never used.","'refusal' is assigned a value but never used.","no-dupe-keys","Duplicate key 'receiptContext'.","ObjectExpression","unexpected","React Hook useEffect has a missing dependency: 'reset'. Either include it or remove the dependency array.",["87"],["88"],"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},"Update the dependencies array to be: [isCorrect, position]",{"range":"95","text":"96"},"Update the dependencies array to be: [reset]",{"range":"97","text":"98"},"Update the dependencies array to be: [currentQuarter, reset]",{"range":"99","text":"100"},[3753,3764],"[isCorrect, position]",[13141,13143],"[reset]",[13193,13209],"[currentQuarter, reset]"]